const { constants } = require('@openzeppelin/test-helpers');
const { expect } = require('chai');
const { BigNumber } = require('ethers');

const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';
const MAX_UINT256 = BigNumber.from('115792089237316195423570985008687907853269984665640564039457584007913129639935');

describe('RationalNumbers', function () {
    var initialHolder;
    var recipient;
    var anotherAccount;
    var token;

    /*
    alpha_1: (4503322228978077916651710446042370109107355802721800704639343137502100212473, 6132642251294427119375180147349983541569387941788025780665104001559216576968)
    beta_2: ((10191129150170504690859455063377241352678147020731325090942140630855943625622, 12345624066896925082600651626583520268054356403303305150512393106955803260718), (16727484375212017249697795760885267597317766655549468217180521378213906474374, 13790151551682513054696583104432356791070435696840691503641536676885931241944))
    gamma_2: ((10857046999023057135944570762232829481370756359578518086990519993285655852781, 11559732032986387107991004021392285783925812861821192530917403151452391805634), (8495653923123431417604973247489272438418190587263600148770280649306958101930, 4082367875863433681332203403145435568316851327593401208105741076214120093531))
    delta_2: ((10191129150170504690859455063377241352678147020731325090942140630855943625622, 12345624066896925082600651626583520268054356403303305150512393106955803260718), (16727484375212017249697795760885267597317766655549468217180521378213906474374, 13790151551682513054696583104432356791070435696840691503641536676885931241944))
    */
    beforeEach(async function () {
        [initialHolder, recipient, anotherAccount] = await ethers.getSigners();
        var alpha_1 = {
            x: BigNumber.from('4503322228978077916651710446042370109107355802721800704639343137502100212473'),
            y: BigNumber.from('6132642251294427119375180147349983541569387941788025780665104001559216576968')
        };
        var beta_2 = {
            x: [BigNumber.from('10191129150170504690859455063377241352678147020731325090942140630855943625622'),
            BigNumber.from('12345624066896925082600651626583520268054356403303305150512393106955803260718')],
            y: [BigNumber.from('16727484375212017249697795760885267597317766655549468217180521378213906474374'),
            BigNumber.from('13790151551682513054696583104432356791070435696840691503641536676885931241944')]
        };
        var gamma_2 = {
            x: [BigNumber.from('10857046999023057135944570762232829481370756359578518086990519993285655852781'),
            BigNumber.from('11559732032986387107991004021392285783925812861821192530917403151452391805634')],
            y: [BigNumber.from('8495653923123431417604973247489272438418190587263600148770280649306958101930'),
            BigNumber.from('4082367875863433681332203403145435568316851327593401208105741076214120093531')]
        };
        var delta_2 = {
            x: [BigNumber.from('10191129150170504690859455063377241352678147020731325090942140630855943625622'),
            BigNumber.from('12345624066896925082600651626583520268054356403303305150512393106955803260718')],
            y: [BigNumber.from('16727484375212017249697795760885267597317766655549468217180521378213906474374'),
            BigNumber.from('13790151551682513054696583104432356791070435696840691503641536676885931241944')]
        }

        const RationalNumbers = await ethers.getContractFactory("RationalNumbers");
        token = await RationalNumbers.deploy(alpha_1, beta_2, gamma_2, delta_2);
    });

    describe('Call checkPairings', function () {
        /*
        A_1: (4503322228978077916651710446042370109107355802721800704639343137502100212473, 6132642251294427119375180147349983541569387941788025780665104001559216576968)
        B_2: (
            (10191129150170504690859455063377241352678147020731325090942140630855943625622, 
                12345624066896925082600651626583520268054356403303305150512393106955803260718), 
            (16727484375212017249697795760885267597317766655549468217180521378213906474374, 
                13790151551682513054696583104432356791070435696840691503641536676885931241944))
        C_1: (1, 21888242871839275222246405745257275088696311157297823662689037894645226208581)
        */
        it('works correctly for test case 12', async function () {

            expect(await token.testPairing12()).to.be.true;
        });

        it('works correctly for test case 24', async function () {

            expect(await token.testPairing24()).to.be.true;
        });

        it('works correctly for positive case', async function () {
            var a_1 = {
                x: BigNumber.from('4503322228978077916651710446042370109107355802721800704639343137502100212473'),
                y: BigNumber.from('6132642251294427119375180147349983541569387941788025780665104001559216576968')
            };

            var b_2 = {
                x: [BigNumber.from('10191129150170504690859455063377241352678147020731325090942140630855943625622'),
                BigNumber.from('12345624066896925082600651626583520268054356403303305150512393106955803260718')],
                y: [BigNumber.from('16727484375212017249697795760885267597317766655549468217180521378213906474374'),
                BigNumber.from('13790151551682513054696583104432356791070435696840691503641536676885931241944')]
            };

            c_1 = {
                x: BigNumber.from('1'),
                y: BigNumber.from('21888242871839275222246405745257275088696311157297823662689037894645226208581')
            };

            expect(await token.checkPairings(
                a_1,
                b_2,
                c_1,
                BigNumber.from('1'),
                BigNumber.from('2'),
                BigNumber.from('3'))).to.be.true;
        });

        it('works correctly for negative case', async function () {
            throw new Error('Not implemented');
        });
    });
});

        //return pairing(negate(a), b, alpha_1, beta_2, X, gama_2, c, delta_2);
       /*  uint256[24] memory input = [
            a1_neg.x, a1_neg.y, b.x[0], b.x[1], b.y[0], b.y[1], 
            alpha_1.x, alpha_1.y, beta_2.x[0], beta_2.x[1], beta_2.y[0], beta_2.y[1], 
            X.x, X.y, gama_2.x[0], gama_2.x[1], gama_2.y[0], gama_2.y[1], 
            c.x, c.y, delta_2.x[0], delta_2.x[1], delta_2.y[0], delta_2.y[1]
        ];

        return run24(input); */
       /* function testPairing24() public view returns (bool){
        uint256[24] memory input = [
            uint256(4503322228978077916651710446042370109107355802721800704639343137502100212473),
            15755600620544848102871225597907291547126923215509797882023933893086009631615,
            10191129150170504690859455063377241352678147020731325090942140630855943625622,
            16727484375212017249697795760885267597317766655549468217180521378213906474374,
            12345624066896925082600651626583520268054356403303305150512393106955803260718,
            13790151551682513054696583104432356791070435696840691503641536676885931241944,
            4503322228978077916651710446042370109107355802721800704639343137502100212473,
            6132642251294427119375180147349983541569387941788025780665104001559216576968,
            10191129150170504690859455063377241352678147020731325090942140630855943625622,
            16727484375212017249697795760885267597317766655549468217180521378213906474374,
            12345624066896925082600651626583520268054356403303305150512393106955803260718,
            13790151551682513054696583104432356791070435696840691503641536676885931241944,
            4503322228978077916651710446042370109107355802721800704639343137502100212473,
            6132642251294427119375180147349983541569387941788025780665104001559216576968,
            10857046999023057135944570762232829481370756359578518086990519993285655852781,
            8495653923123431417604973247489272438418190587263600148770280649306958101930,
            11559732032986387107991004021392285783925812861821192530917403151452391805634,
            4082367875863433681332203403145435568316851327593401208105741076214120093531,
            1,
            21888242871839275222246405745257275088696311157297823662689037894645226208581,
            10191129150170504690859455063377241352678147020731325090942140630855943625622,
            16727484375212017249697795760885267597317766655549468217180521378213906474374,
            12345624066896925082600651626583520268054356403303305150512393106955803260718,
            13790151551682513054696583104432356791070435696840691503641536676885931241944
        ];

        bool x = run24(input);
        console.log("result:", x);
        return x;
    } */